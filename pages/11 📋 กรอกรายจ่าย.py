import streamlit as st
from datetime import datetime
import pandas as pd
import os
from openpyxl import load_workbook

FUND_FILE = "table/expend_data.xlsx"
AR_LOOKUP_FILE = "table/ar_code.xlsx"
SPEND_LOOKUP_FILE = "table/unique_spend_code.csv"
INCOME_FILE = "table/income_data.xlsx"

@st.cache_data(ttl=60)
def load_ar_lookup():
    if os.path.exists(AR_LOOKUP_FILE):
        df = pd.read_excel(AR_LOOKUP_FILE, dtype=str).fillna("")
        df.columns = df.columns.str.strip().str.replace("\ufeff", "", regex=False)
        df = df.apply(lambda col: col.map(lambda x: x.strip() if isinstance(x, str) else x))  # ‚úÖ ‡πÉ‡∏´‡∏°‡πà
        return df
    return pd.DataFrame(columns=["‡∏£‡∏´‡∏±‡∏™‡πÇ‡∏Ñ‡∏£‡∏á‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡∏à‡∏±‡∏¢", "ar_code", "‡∏£‡∏´‡∏±‡∏™‡∏Ñ‡πà‡∏≤‡πÉ‡∏ä‡πâ‡∏à‡πà‡∏≤‡∏¢"])

@st.cache_data
def load_income_data():
    if os.path.exists(INCOME_FILE):
        df = pd.read_excel(INCOME_FILE, dtype=str).fillna("")
        df.columns = df.columns.str.strip()
        return df
    return pd.DataFrame()

@st.cache_data
def load_spend_lookup():
    if os.path.exists(SPEND_LOOKUP_FILE):
        df = pd.read_csv(SPEND_LOOKUP_FILE, dtype=str).fillna("")
        df.columns = df.columns.str.strip()
        return df
    return pd.DataFrame(columns=["‡∏£‡∏´‡∏±‡∏™‡∏Ñ‡πà‡∏≤‡πÉ‡∏ä‡πâ‡∏à‡πà‡∏≤‡∏¢", "‡∏´‡∏°‡∏ß‡∏î‡∏£‡∏≤‡∏¢‡∏à‡πà‡∏≤‡∏¢", "‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£", "‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏Ñ‡πà‡∏≤‡πÉ‡∏ä‡πâ‡∏à‡πà‡∏≤‡∏¢"])

def lookup_spend_detail(spend_code):
    df = load_spend_lookup()
    matched = df[df["‡∏£‡∏´‡∏±‡∏™‡∏Ñ‡πà‡∏≤‡πÉ‡∏ä‡πâ‡∏à‡πà‡∏≤‡∏¢"] == spend_code.strip()]
    if not matched.empty:
        return (matched.iloc[0]["‡∏´‡∏°‡∏ß‡∏î‡∏£‡∏≤‡∏¢‡∏à‡πà‡∏≤‡∏¢"], matched.iloc[0]["‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£"], matched.iloc[0]["‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏Ñ‡πà‡∏≤‡πÉ‡∏ä‡πâ‡∏à‡πà‡∏≤‡∏¢"])
    return "", "", ""

def save_to_excel(df, filename):
    df.to_excel(filename, index=False)
    wb = load_workbook(filename)
    ws = wb.active
    for cell in ws['A']:
        cell.number_format = 'YYYY-MM-DD HH:mm:ss'
    wb.save(filename)

def init_session():
    st.session_state.fund_project_code = ""
    st.session_state.fund_type = ""
    st.session_state.fund_date = datetime.today()
    st.session_state.contract_date = datetime.today()
    st.session_state.contract_payment_type = ""
    st.session_state.contract_code = ""


def reset_form():
    tmp_rows = st.session_state.get("__tmp_new_rows__", None)

    st.session_state.clear()  # ‡πÄ‡∏Ñ‡∏•‡∏µ‡∏¢‡∏£‡πå‡∏ó‡∏∏‡∏Å‡∏≠‡∏¢‡πà‡∏≤‡∏á
    
    if tmp_rows is not None:
        st.session_state["__tmp_new_rows__"] = tmp_rows  # ‡πÄ‡∏Å‡πá‡∏ö‡πÑ‡∏ß‡πâ‡∏ï‡πà‡∏≠

    st.session_state["just_reset"] = True
    st.rerun()



required_keys = ["fund_date", "contract_payment_type", "contract_code", "fund_project_code"]
if not all(key in st.session_state for key in required_keys):
    init_session()

st.set_page_config(page_title="‡∏£‡∏∞‡∏ö‡∏ö‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏ó‡∏∏‡∏ô‡πÇ‡∏Ñ‡∏£‡∏á‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡∏à‡∏±‡∏¢", layout="wide")
st.title("üìã ‡∏£‡∏∞‡∏ö‡∏ö‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏ó‡∏∏‡∏ô‡πÇ‡∏Ñ‡∏£‡∏á‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡∏à‡∏±‡∏¢")

ar_lookup = load_ar_lookup()
income_df = load_income_data()

st.session_state.fund_date = st.date_input("üìÖ ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏Å‡∏£‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•", value=st.session_state.fund_date)

fund_project_code_list1 = sorted(income_df["‡∏£‡∏´‡∏±‡∏™‡πÇ‡∏Ñ‡∏£‡∏á‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡∏à‡∏±‡∏¢"].dropna().unique().tolist())
fund_project_code_list2 = [""] + fund_project_code_list1  # ‡∏´‡∏£‡∏∑‡∏≠ ["‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å"] + fund_source_list
st.session_state.fund_project_code = st.selectbox("‡∏£‡∏´‡∏±‡∏™‡πÇ‡∏Ñ‡∏£‡∏á‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡∏à‡∏±‡∏¢", fund_project_code_list2, index=fund_project_code_list2.index(st.session_state.fund_project_code))

if st.session_state.fund_project_code:
    filtered_income = income_df[
        income_df["‡∏£‡∏´‡∏±‡∏™‡πÇ‡∏Ñ‡∏£‡∏á‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡∏à‡∏±‡∏¢"] == st.session_state.fund_project_code
    ]
    available_fund_type = sorted(filtered_income["‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏ó‡∏∏‡∏ô"].dropna().unique().tolist())
    st.session_state.fund_type = st.selectbox(
        "‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏ó‡∏∏‡∏ô",
        available_fund_type,
        index=available_fund_type.index(st.session_state.fund_type) if st.session_state.fund_type in available_fund_type else 0
    )

# ‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô error ‡πÇ‡∏î‡∏¢‡πÉ‡∏ä‡πâ get()
contract_payment_type_list = ["","‡∏Ñ‡πà‡∏≤‡πÉ‡∏ä‡πâ‡∏à‡πà‡∏≤‡∏¢‡∏à‡∏£‡∏¥‡∏á", "‡πÄ‡∏á‡∏¥‡∏ô‡∏¢‡∏∑‡∏°‡∏ó‡∏î‡∏£‡∏≠‡∏á‡∏à‡πà‡∏≤‡∏¢"]
st.session_state.contract_payment_type = st.selectbox("üíº ‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏Å‡∏≤‡∏£‡∏à‡πà‡∏≤‡∏¢‡πÄ‡∏á‡∏¥‡∏ô", contract_payment_type_list, index=contract_payment_type_list.index(st.session_state.contract_payment_type))
st.session_state.contract_date = st.date_input("üìÖ ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏ö‡∏¥‡∏Å‡∏à‡πà‡∏≤‡∏¢", value=st.session_state.contract_date)

contract_code_input = st.text_input("üî¢ ‡∏£‡∏´‡∏±‡∏™‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏° (13 ‡∏´‡∏•‡∏±‡∏Å)", value=st.session_state.contract_code)
if contract_code_input and (not contract_code_input.isdigit() or len(contract_code_input) != 13):
    st.error("‚ùå ‡∏£‡∏´‡∏±‡∏™‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç 13 ‡∏´‡∏•‡∏±‡∏Å‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô")
    st.stop()
else:
    st.session_state.contract_code = contract_code_input

if st.session_state.fund_project_code:
    filtered_income = income_df[
        (income_df["‡∏£‡∏´‡∏±‡∏™‡πÇ‡∏Ñ‡∏£‡∏á‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡∏à‡∏±‡∏¢"] == st.session_state.fund_project_code) &
        (income_df["‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏ó‡∏∏‡∏ô"] == st.session_state.fund_type)
    ]
    available_rounds = sorted(filtered_income["‡∏á‡∏ß‡∏î"].dropna().astype(int).unique().tolist())

    if not available_rounds:
        st.warning("‚ùó ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏á‡∏ß‡∏î‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÇ‡∏Ñ‡∏£‡∏á‡∏Å‡∏≤‡∏£‡πÅ‡∏•‡∏∞‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏ó‡∏∏‡∏ô‡∏ô‡∏µ‡πâ")
        st.stop()

    selected_rounds = st.multiselect("üì¶ ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏á‡∏ß‡∏î‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏î‡∏π‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•", available_rounds)
    if not selected_rounds:
        st.info("üëâ ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏á‡∏ß‡∏î‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ô‡πâ‡∏≠‡∏¢ 1 ‡∏á‡∏ß‡∏î")
        st.stop()

    grand_total = 0.0

    for selected_round in selected_rounds:
        st.markdown(f"### üì¶ ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏á‡∏ß‡∏î‡∏ó‡∏µ‡πà {selected_round}")

        round_income = filtered_income[filtered_income["‡∏á‡∏ß‡∏î"].astype(int) == selected_round]
        valid_spend_codes = round_income["‡∏£‡∏´‡∏±‡∏™‡∏Ñ‡πà‡∏≤‡πÉ‡∏ä‡πâ‡∏à‡πà‡∏≤‡∏¢"].dropna().unique().tolist()

        total_amt = 0.0
        data_rows = []

        # ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏°‡∏µ AR code
        ar_rows = ar_lookup[
            (ar_lookup["‡∏£‡∏´‡∏±‡∏™‡πÇ‡∏Ñ‡∏£‡∏á‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡∏à‡∏±‡∏¢"] == st.session_state.fund_project_code) &
            (ar_lookup["ar_code"].notna()) & (ar_lookup["ar_code"].str.strip() != "") &
            (ar_lookup["‡∏£‡∏´‡∏±‡∏™‡∏Ñ‡πà‡∏≤‡πÉ‡∏ä‡πâ‡∏à‡πà‡∏≤‡∏¢"].isin(valid_spend_codes))
        ]

        for ar_code in ar_rows["ar_code"].unique():
            st.markdown(f'#### üéØ AR code: {ar_code}')
            rows = ar_rows[ar_rows["ar_code"] == ar_code]
            for i, row in rows.iterrows():
                spend = row["‡∏£‡∏´‡∏±‡∏™‡∏Ñ‡πà‡∏≤‡πÉ‡∏ä‡πâ‡∏à‡πà‡∏≤‡∏¢"]
                cat, item, cost_type = lookup_spend_detail(spend)
                col1, col2 = st.columns([2, 3])
                with col1:
                    st.text_input("üî¢ ‡∏£‡∏´‡∏±‡∏™‡∏Ñ‡πà‡∏≤‡πÉ‡∏ä‡πâ‡∏à‡πà‡∏≤‡∏¢", value=spend, key=f"code_{selected_round}_{ar_code}_{i}", disabled=True)
                with col2:
                    st.text_input("üìÇ ‡∏´‡∏°‡∏ß‡∏î‡∏£‡∏≤‡∏¢‡∏à‡πà‡∏≤‡∏¢", value=cat, key=f"cat_{selected_round}_{ar_code}_{i}", disabled=True)
                    st.text_input("üìå ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£", value=item, key=f"item_{selected_round}_{ar_code}_{i}", disabled=True)
                    st.text_input("üßæ ‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏Ñ‡πà‡∏≤‡πÉ‡∏ä‡πâ‡∏à‡πà‡∏≤‡∏¢", value=cost_type, key=f"cost_{selected_round}_{ar_code}_{i}", disabled=True)
                    amt = st.number_input("üí∞ ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏á‡∏¥‡∏ô", min_value=0.0, step=100.0, key=f"amt_{selected_round}_{ar_code}_{i}")
                    total_amt += amt
                    data_rows.append((selected_round, ar_code, spend, cat, item, cost_type, amt))

        # ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏°‡∏µ AR code (‡∏ô‡∏≠‡∏Å‡∏Å‡∏•‡∏∏‡πà‡∏° AR code)
        # ‡∏´‡∏≤‡∏£‡∏´‡∏±‡∏™‡∏Ñ‡πà‡∏≤‡πÉ‡∏ä‡πâ‡∏à‡πà‡∏≤‡∏¢‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡πÉ‡∏ô‡∏£‡∏≠‡∏ö‡∏ô‡∏µ‡πâ
        spend_codes_in_round = set(valid_spend_codes)

        # ‡∏´‡∏≤‡∏£‡∏´‡∏±‡∏™‡∏ó‡∏µ‡πà‡∏°‡∏µ AR code ‡πÑ‡∏õ‡πÅ‡∏•‡πâ‡∏ß
        ar_used_spend_codes = set(ar_rows["‡∏£‡∏´‡∏±‡∏™‡∏Ñ‡πà‡∏≤‡πÉ‡∏ä‡πâ‡∏à‡πà‡∏≤‡∏¢"].unique())

        # ‡∏£‡∏´‡∏±‡∏™‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏°‡∏µ AR code
        spend_codes_without_ar = spend_codes_in_round - ar_used_spend_codes

        if spend_codes_without_ar:
            st.markdown(f"### üßæ ‡∏£‡∏´‡∏±‡∏™‡∏Ñ‡πà‡∏≤‡πÉ‡∏ä‡πâ‡∏à‡πà‡∏≤‡∏¢‡∏ô‡∏≠‡∏Å‡∏Å‡∏•‡∏∏‡πà‡∏° AR code")
            for i, spend in enumerate(spend_codes_without_ar):
                cat, item, cost_type = lookup_spend_detail(spend)
                col1, col2 = st.columns([2, 3])
                with col1:
                    st.text_input("üî¢ ‡∏£‡∏´‡∏±‡∏™‡∏Ñ‡πà‡∏≤‡πÉ‡∏ä‡πâ‡∏à‡πà‡∏≤‡∏¢", value=spend, key=f"outside_code_{selected_round}_{i}", disabled=True)
                    st.text_input("üìÇ ‡∏´‡∏°‡∏ß‡∏î‡∏£‡∏≤‡∏¢‡∏à‡πà‡∏≤‡∏¢", value=cat, key=f"outside_cat_{selected_round}_{i}", disabled=True)
                    st.text_input("üìå ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£", value=item, key=f"outside_item_{selected_round}_{i}", disabled=True)
                    st.text_input("üßæ ‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏Ñ‡πà‡∏≤‡πÉ‡∏ä‡πâ‡∏à‡πà‡∏≤‡∏¢", value=cost_type, key=f"outside_cost_{selected_round}_{i}", disabled=True)
                with col2:
                    amt = st.number_input("üí∞ ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏á‡∏¥‡∏ô", min_value=0.0, step=100.0, key=f"amt_free_{selected_round}_{i}")
                    total_amt += amt
                    data_rows.append((selected_round, "", spend, cat, item, cost_type, amt))

        grand_total += total_amt
        st.info(f"üíµ ‡∏¢‡∏≠‡∏î‡∏£‡∏ß‡∏°‡∏á‡∏ß‡∏î‡∏ó‡∏µ‡πà {selected_round}: {total_amt:,.2f} ‡∏ö‡∏≤‡∏ó")
        st.success(f"üí∞üí∞ ‡∏¢‡∏≠‡∏î‡∏£‡∏ß‡∏°‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏Ç‡∏≠‡∏á‡∏ó‡∏∏‡∏Å‡∏á‡∏ß‡∏î: {grand_total:,.2f} ‡∏ö‡∏≤‡∏ó")
        if st.button(f"üíæ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏á‡∏ß‡∏î {selected_round}", key=f"btn_save_{selected_round}"):
            if data_rows:
                saved_rows = []
                for round_no, ar_code, spend, cat, item, cost_type, amt in data_rows:
                    if round_no == selected_round and amt > 0:
                        saved_rows.append({
                            "‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏Å‡∏£‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•": datetime.combine(st.session_state.fund_date, datetime.now().time()),
                            "‡∏£‡∏´‡∏±‡∏™‡πÇ‡∏Ñ‡∏£‡∏á‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡∏à‡∏±‡∏¢": st.session_state.fund_project_code,
                            "‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏ó‡∏∏‡∏ô": st.session_state.fund_type,
                            "‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏Å‡∏≤‡∏£‡∏à‡πà‡∏≤‡∏¢‡πÄ‡∏á‡∏¥‡∏ô": st.session_state.contract_payment_type,
                            "‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏ö‡∏¥‡∏Å‡∏à‡πà‡∏≤‡∏¢": st.session_state.contract_date,
                            "‡∏£‡∏´‡∏±‡∏™‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°": st.session_state.contract_code,
                            "‡∏á‡∏ß‡∏î": round_no,
                            "ar_code": ar_code,
                            "‡∏£‡∏´‡∏±‡∏™‡∏Ñ‡πà‡∏≤‡πÉ‡∏ä‡πâ‡∏à‡πà‡∏≤‡∏¢": spend,
                            "‡∏´‡∏°‡∏ß‡∏î‡∏£‡∏≤‡∏¢‡∏à‡πà‡∏≤‡∏¢": cat,
                            "‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£": item,
                            "‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏Ñ‡πà‡∏≤‡πÉ‡∏ä‡πâ‡∏à‡πà‡∏≤‡∏¢": cost_type,
                            "‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏á‡∏¥‡∏ô": amt
                        })

                df = pd.DataFrame(saved_rows)
                if os.path.exists(FUND_FILE):
                    old_df = pd.read_excel(FUND_FILE)
                    df = pd.concat([old_df, df], ignore_index=True)
                try:
                    save_to_excel(df, FUND_FILE)
                    st.success(f"‚úÖ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß")
                    st.cache_data.clear()
                    st.session_state["__tmp_new_rows__"] = saved_rows
                    reset_form()  # ‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ö‡∏£‡∏£‡∏ó‡∏±‡∏î‡∏ô‡∏µ‡πâ
                except Exception as e:
                    st.error(f"‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å {FUND_FILE} ‡πÑ‡∏î‡πâ: {e}")

                # üîÑ ‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏Å‡∏£‡∏ì‡∏µ‡πÄ‡∏õ‡πá‡∏ô‡πÄ‡∏á‡∏¥‡∏ô‡∏¢‡∏∑‡∏°‡∏ó‡∏î‡∏£‡∏≠‡∏á‡∏à‡πà‡∏≤‡∏¢ ‡πÉ‡∏´‡πâ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏•‡∏á reserve_payment.xlsx ‡∏î‡πâ‡∏ß‡∏¢
                if st.session_state.contract_payment_type == "‡πÄ‡∏á‡∏¥‡∏ô‡∏¢‡∏∑‡∏°‡∏ó‡∏î‡∏£‡∏≠‡∏á‡∏à‡πà‡∏≤‡∏¢" :
                    reserve_rows = []
                    for row in saved_rows:
                        borrow_date = pd.to_datetime(row["‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏ö‡∏¥‡∏Å‡∏à‡πà‡∏≤‡∏¢"])
                        return_date = borrow_date + pd.Timedelta(days=90)
                        reserve_rows.append({
                            "‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏Å‡∏£‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•": row["‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏Å‡∏£‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•"],
                            "‡∏£‡∏´‡∏±‡∏™‡πÇ‡∏Ñ‡∏£‡∏á‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡∏à‡∏±‡∏¢": row["‡∏£‡∏´‡∏±‡∏™‡πÇ‡∏Ñ‡∏£‡∏á‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡∏à‡∏±‡∏¢"],
                            "ar_code": row["ar_code"],
                            "‡∏£‡∏´‡∏±‡∏™‡∏Ñ‡πà‡∏≤‡πÉ‡∏ä‡πâ‡∏à‡πà‡∏≤‡∏¢": row["‡∏£‡∏´‡∏±‡∏™‡∏Ñ‡πà‡∏≤‡πÉ‡∏ä‡πâ‡∏à‡πà‡∏≤‡∏¢"],
                            "‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏¢‡∏∑‡∏°": row["‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏ö‡∏¥‡∏Å‡∏à‡πà‡∏≤‡∏¢"],
                            "‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏á‡∏¥‡∏ô": row["‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏á‡∏¥‡∏ô"],
                            "‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Ñ‡∏∑‡∏ô": pd.to_datetime(row["‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏ö‡∏¥‡∏Å‡∏à‡πà‡∏≤‡∏¢"]) + pd.Timedelta(days=90),
                            "‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏Ñ‡∏∑‡∏ô‡πÄ‡∏á‡∏¥‡∏ô": return_date,
                            "‡πÄ‡∏á‡∏¥‡∏ô‡∏ó‡∏µ‡πà‡∏Ñ‡∏∑‡∏ô": "",
                            "‡∏Ñ‡∏á‡πÄ‡∏´‡∏•‡∏∑‡∏≠": "",
                            "‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞": ""
                        })
                    reserve_df = pd.DataFrame(reserve_rows)
                    reserve_file = "table/reserve_payment.xlsx"

                    if os.path.exists(reserve_file):
                        old_reserve = pd.read_excel(reserve_file)
                        frames = [df for df in [old_reserve, reserve_df] if not df.empty and not df.isna().all().all()]
                        reserve_df = pd.concat(frames, ignore_index=True) if frames else pd.DataFrame()

                    try:
                        save_to_excel(reserve_df, reserve_file)
                        st.info("üìÅ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏á‡∏¥‡∏ô‡∏¢‡∏∑‡∏°‡∏ó‡∏î‡∏£‡∏≠‡∏á‡∏à‡πà‡∏≤‡∏¢‡∏•‡∏á reserve_payment.xlsx ‡πÅ‡∏•‡πâ‡∏ß")
                        st.cache_data.clear()
                    except Exception as e:
                        st.error(f"‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å reserve_payment.xlsx ‡πÑ‡∏î‡πâ: {e}")
            else:
                st.warning("‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡πâ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å")
                
# --- ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏£‡∏µ‡πÄ‡∏ã‡∏ï‡πÄ‡∏™‡∏£‡πá‡∏à ‡πÉ‡∏´‡πâ‡∏Ñ‡∏∑‡∏ô‡∏Ñ‡πà‡∏≤ new_rows ‡∏Å‡∏•‡∏±‡∏ö‡∏°‡∏≤ ---
if st.session_state.get("just_reset", False):
    if "__tmp_new_rows__" in st.session_state:
        st.session_state["new_rows"] = st.session_state["__tmp_new_rows__"]
        del st.session_state["__tmp_new_rows__"]

    st.success("üîÑ ‡∏ü‡∏≠‡∏£‡πå‡∏°‡∏ñ‡∏π‡∏Å‡∏£‡∏µ‡πÄ‡∏ã‡∏ï‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß")
    del st.session_state["just_reset"]


if "new_rows" in st.session_state:
    new_rows_df = pd.DataFrame(st.session_state["new_rows"])
    st.subheader("üìã ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡πÄ‡∏û‡∏¥‡πà‡∏á‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î")
    st.dataframe(new_rows_df.astype(str))