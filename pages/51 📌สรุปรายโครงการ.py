import streamlit as st
import pandas as pd
import plotly.express as px
from datetime import datetime

INCOME_FILE = "table/income_data.xlsx"
EXPEND_FILE = "table/expend_data.xlsx"

@st.cache_data
def load_data():
    income_df = pd.read_excel(INCOME_FILE, dtype=str)
    expend_df = pd.read_excel(EXPEND_FILE, dtype=str)
    return income_df, expend_df

st.set_page_config(page_title="üìä ‡∏™‡∏£‡∏∏‡∏õ‡∏£‡∏≤‡∏¢‡∏£‡∏±‡∏ö-‡∏£‡∏≤‡∏¢‡∏à‡πà‡∏≤‡∏¢‡∏£‡∏≤‡∏¢‡πÇ‡∏Ñ‡∏£‡∏á‡∏Å‡∏≤‡∏£", layout="wide")
st.title("üìä ‡∏™‡∏£‡∏∏‡∏õ‡∏£‡∏≤‡∏¢‡∏£‡∏±‡∏ö-‡∏£‡∏≤‡∏¢‡∏à‡πà‡∏≤‡∏¢‡∏£‡∏≤‡∏¢‡πÇ‡∏Ñ‡∏£‡∏á‡∏Å‡∏≤‡∏£")

# ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
income_df, expend_df = load_data()

# ‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
income_df["‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏á‡∏¥‡∏ô"] = pd.to_numeric(income_df["‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏á‡∏¥‡∏ô"], errors='coerce').fillna(0)
income_df["‡∏á‡∏ß‡∏î"] = pd.to_numeric(income_df["‡∏á‡∏ß‡∏î"], errors='coerce').fillna(0).astype(int)
expend_df["‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏á‡∏¥‡∏ô"] = pd.to_numeric(expend_df["‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏á‡∏¥‡∏ô"], errors='coerce').fillna(0)
expend_df["‡∏á‡∏ß‡∏î"] = pd.to_numeric(expend_df["‡∏á‡∏ß‡∏î"], errors='coerce').fillna(0).astype(int)

for df in [income_df, expend_df]:
    for col in df.columns:
        if df[col].dtype == "object":
            df[col] = df[col].str.strip()

# ‡∏ï‡∏±‡∏ß‡∏Å‡∏£‡∏≠‡∏á‡∏£‡∏´‡∏±‡∏™‡πÇ‡∏Ñ‡∏£‡∏á‡∏Å‡∏≤‡∏£
project_codes = income_df["‡∏£‡∏´‡∏±‡∏™‡πÇ‡∏Ñ‡∏£‡∏á‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡∏à‡∏±‡∏¢"].dropna().unique()
selected_code = st.selectbox("üìå ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏£‡∏´‡∏±‡∏™‡πÇ‡∏Ñ‡∏£‡∏á‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡∏à‡∏±‡∏¢:", sorted(project_codes))

# ‡∏Å‡∏£‡∏≠‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡∏≤‡∏°‡∏£‡∏´‡∏±‡∏™‡πÇ‡∏Ñ‡∏£‡∏á‡∏Å‡∏≤‡∏£
income_proj = income_df[income_df["‡∏£‡∏´‡∏±‡∏™‡πÇ‡∏Ñ‡∏£‡∏á‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡∏à‡∏±‡∏¢"] == selected_code].copy()
expend_proj = expend_df[expend_df["‡∏£‡∏´‡∏±‡∏™‡πÇ‡∏Ñ‡∏£‡∏á‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡∏à‡∏±‡∏¢"] == selected_code].copy()

# ‡∏Å‡∏£‡∏≠‡∏á‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏Ñ‡πà‡∏≤‡πÉ‡∏ä‡πâ‡∏à‡πà‡∏≤‡∏¢‡∏à‡∏£‡∏¥‡∏á
expend_proj = expend_proj[expend_proj["‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏Å‡∏≤‡∏£‡∏à‡πà‡∏≤‡∏¢‡πÄ‡∏á‡∏¥‡∏ô"] == "‡∏Ñ‡πà‡∏≤‡πÉ‡∏ä‡πâ‡∏à‡πà‡∏≤‡∏¢‡∏à‡∏£‡∏¥‡∏á"]

# ‡∏£‡∏ß‡∏°‡∏£‡∏≤‡∏¢‡∏£‡∏±‡∏ö-‡∏£‡∏≤‡∏¢‡∏à‡πà‡∏≤‡∏¢
merged = pd.merge(
    income_proj[[
        "‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏Å‡∏£‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•", "‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏ó‡∏∏‡∏ô", "ar_code", "‡∏£‡∏´‡∏±‡∏™‡∏Ñ‡πà‡∏≤‡πÉ‡∏ä‡πâ‡∏à‡πà‡∏≤‡∏¢", "‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏á‡∏¥‡∏ô", "‡∏á‡∏ß‡∏î"
    ]].rename(columns={"‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏á‡∏¥‡∏ô": "‡∏£‡∏≤‡∏¢‡∏£‡∏±‡∏ö"}),
    expend_proj[[
        "‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏ó‡∏∏‡∏ô", "ar_code", "‡∏£‡∏´‡∏±‡∏™‡∏Ñ‡πà‡∏≤‡πÉ‡∏ä‡πâ‡∏à‡πà‡∏≤‡∏¢", "‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏á‡∏¥‡∏ô", "‡∏á‡∏ß‡∏î", "‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏ö‡∏¥‡∏Å‡∏à‡πà‡∏≤‡∏¢"
    ]].rename(columns={"‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏á‡∏¥‡∏ô": "‡∏£‡∏≤‡∏¢‡∏à‡πà‡∏≤‡∏¢"}),
    on=["‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏ó‡∏∏‡∏ô", "ar_code", "‡∏£‡∏´‡∏±‡∏™‡∏Ñ‡πà‡∏≤‡πÉ‡∏ä‡πâ‡∏à‡πà‡∏≤‡∏¢", "‡∏á‡∏ß‡∏î"],
    how="outer"
)

merged["‡∏£‡∏≤‡∏¢‡∏£‡∏±‡∏ö"] = merged["‡∏£‡∏≤‡∏¢‡∏£‡∏±‡∏ö"].fillna(0)
merged["‡∏£‡∏≤‡∏¢‡∏à‡πà‡∏≤‡∏¢"] = merged["‡∏£‡∏≤‡∏¢‡∏à‡πà‡∏≤‡∏¢"].fillna(0)
merged["‡∏Ñ‡∏á‡πÄ‡∏´‡∏•‡∏∑‡∏≠"] = merged["‡∏£‡∏≤‡∏¢‡∏£‡∏±‡∏ö"] - merged["‡∏£‡∏≤‡∏¢‡∏à‡πà‡∏≤‡∏¢"]

# ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏™‡∏£‡∏∏‡∏õ‡∏†‡∏≤‡∏û‡∏£‡∏ß‡∏°
total_income_all = merged["‡∏£‡∏≤‡∏¢‡∏£‡∏±‡∏ö"].sum()
total_expend_all = merged["‡∏£‡∏≤‡∏¢‡∏à‡πà‡∏≤‡∏¢"].sum()
total_balance_all = total_income_all - total_expend_all

# ‡∏™‡∏£‡πâ‡∏≤‡∏á Pie Chart ‡πÄ‡∏â‡∏û‡∏≤‡∏∞ ‡∏£‡∏≤‡∏¢‡∏à‡πà‡∏≤‡∏¢ + ‡∏Ñ‡∏á‡πÄ‡∏´‡∏•‡∏∑‡∏≠
pie_total = pd.DataFrame({
    "‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó": ["‡∏£‡∏≤‡∏¢‡∏à‡πà‡∏≤‡∏¢", "‡∏Ñ‡∏á‡πÄ‡∏´‡∏•‡∏∑‡∏≠"],
    "‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏á‡∏¥‡∏ô": [total_expend_all, total_balance_all]
})

fig_total = px.pie(
    pie_total,
    names="‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó",
    values="‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏á‡∏¥‡∏ô",
    hole=0,
    color="‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó",
    color_discrete_map={
        "‡∏£‡∏≤‡∏¢‡∏à‡πà‡∏≤‡∏¢": "#e98888",
        "‡∏Ñ‡∏á‡πÄ‡∏´‡∏•‡∏∑‡∏≠": "#9febc5"
    }
)
fig_total.update_traces(textposition="inside", textinfo="percent+label")

# ‡πÅ‡∏™‡∏î‡∏á‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡πÇ‡∏Ñ‡∏£‡∏á‡∏Å‡∏≤‡∏£ + Pie Chart
proj_info = income_proj.iloc[0] if not income_proj.empty else None
if proj_info is not None:
    contract_code = proj_info.get("‡∏£‡∏´‡∏±‡∏™‡∏™‡∏±‡∏ç‡∏ç‡∏≤", "-")
    contract_date_str = proj_info.get("‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏ã‡∏ô‡∏™‡∏±‡∏ç‡∏ç‡∏≤", "")
    project_months = int(float(proj_info.get("‡∏£‡∏∞‡∏¢‡∏∞‡πÄ‡∏ß‡∏•‡∏≤‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡πÇ‡∏Ñ‡∏£‡∏á‡∏Å‡∏≤‡∏£ (‡πÄ‡∏î‡∏∑‡∏≠‡∏ô)", 0)))

    try:
        contract_date = pd.to_datetime(contract_date_str, errors="coerce")
        today = datetime.today()
        elapsed_days = (today - contract_date).days
        elapsed_months = elapsed_days // 30
        remain_days = max(project_months * 30 - elapsed_days, 0)
        remain_months = remain_days // 30
        remain_day_remain = remain_days % 30
    except:
        contract_date = None
        elapsed_months = remain_months = remain_day_remain = elapsed_days = 0

    col1, col2 = st.columns([1.2, 1])

    with col1:
        st.markdown(
            """
            <div style="height: 100%; display: flex; flex-direction: column; justify-content: center;">
            <h3>üìÅ ‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡πÇ‡∏Ñ‡∏£‡∏á‡∏Å‡∏≤‡∏£</h3>
            <p>- <b>‡∏£‡∏´‡∏±‡∏™‡πÇ‡∏Ñ‡∏£‡∏á‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡∏à‡∏±‡∏¢:</b> {selected_code}</p>
            <p>- <b>‡∏£‡∏´‡∏±‡∏™‡∏™‡∏±‡∏ç‡∏ç‡∏≤:</b> {contract_code}</p>
            <p>- <b>‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏ã‡∏ô‡∏™‡∏±‡∏ç‡∏ç‡∏≤:</b> {contract_date}</p>
            <p>- <b>‡∏£‡∏∞‡∏¢‡∏∞‡πÄ‡∏ß‡∏•‡∏≤‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£:</b> {project_months} ‡πÄ‡∏î‡∏∑‡∏≠‡∏ô</p>
            <p>- <b>‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£‡πÅ‡∏•‡πâ‡∏ß:</b> {elapsed_months} ‡πÄ‡∏î‡∏∑‡∏≠‡∏ô {elapsed_days_mod} ‡∏ß‡∏±‡∏ô</p>
            <p>- <b>‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡∏≠‡∏µ‡∏Å:</b> {remain_months} ‡πÄ‡∏î‡∏∑‡∏≠‡∏ô {remain_day_remain} ‡∏ß‡∏±‡∏ô</p>
            </div>
            """.format(
                selected_code=selected_code,
                contract_code=contract_code,
                contract_date=contract_date.strftime('%d/%m/%Y') if contract_date else '-',
                project_months=project_months,
                elapsed_months=elapsed_months,
                elapsed_days_mod=elapsed_days % 30,
                remain_months=remain_months,
                remain_day_remain=remain_day_remain
            ),
            unsafe_allow_html=True
        )

    with col2:
        st.plotly_chart(fig_total, use_container_width=True)

# ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏£‡∏≤‡∏¢‡∏á‡∏ß‡∏î
st.markdown("### üìë ‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏£‡∏≤‡∏¢‡∏£‡∏±‡∏ö-‡∏£‡∏≤‡∏¢‡∏à‡πà‡∏≤‡∏¢‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏á‡∏ß‡∏î")

for period in sorted(merged["‡∏á‡∏ß‡∏î"].unique()):
    period_data = merged[merged["‡∏á‡∏ß‡∏î"] == period].copy()
    st.markdown(f"#### üî∏ ‡∏á‡∏ß‡∏î‡∏ó‡∏µ‡πà {period}")

    st.dataframe(period_data[[
        "‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏Å‡∏£‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•", "‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏ó‡∏∏‡∏ô", "ar_code", "‡∏£‡∏´‡∏±‡∏™‡∏Ñ‡πà‡∏≤‡πÉ‡∏ä‡πâ‡∏à‡πà‡∏≤‡∏¢",
        "‡∏£‡∏≤‡∏¢‡∏£‡∏±‡∏ö", "‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏ö‡∏¥‡∏Å‡∏à‡πà‡∏≤‡∏¢", "‡∏£‡∏≤‡∏¢‡∏à‡πà‡∏≤‡∏¢", "‡∏Ñ‡∏á‡πÄ‡∏´‡∏•‡∏∑‡∏≠"
    ]].fillna("").style.format({
        "‡∏£‡∏≤‡∏¢‡∏£‡∏±‡∏ö": "{:,.2f}", "‡∏£‡∏≤‡∏¢‡∏à‡πà‡∏≤‡∏¢": "{:,.2f}", "‡∏Ñ‡∏á‡πÄ‡∏´‡∏•‡∏∑‡∏≠": "{:,.2f}"
    }))

    total_income = period_data["‡∏£‡∏≤‡∏¢‡∏£‡∏±‡∏ö"].sum()
    total_expend = period_data["‡∏£‡∏≤‡∏¢‡∏à‡πà‡∏≤‡∏¢"].sum()
    balance = total_income - total_expend

    overall_income = merged["‡∏£‡∏≤‡∏¢‡∏£‡∏±‡∏ö"].sum()
    percent_income = (total_income / overall_income) * 100 if overall_income > 0 else 0
    percent_expend = (total_expend / overall_income) * 100 if overall_income > 0 else 0
    percent_balance = (balance / overall_income) * 100 if overall_income > 0 else 0

    st.markdown(f"""
    üîπ **‡∏™‡∏£‡∏∏‡∏õ‡∏á‡∏ß‡∏î‡∏ó‡∏µ‡πà {period}**
    - ‡∏£‡∏≤‡∏¢‡∏£‡∏±‡∏ö‡∏£‡∏ß‡∏°: {total_income:,.2f} ‡∏ö‡∏≤‡∏ó ({percent_income:.2f}% ‡∏Ç‡∏≠‡∏á‡∏£‡∏≤‡∏¢‡∏£‡∏±‡∏ö‡∏£‡∏ß‡∏°‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î)
    - ‡∏£‡∏≤‡∏¢‡∏à‡πà‡∏≤‡∏¢‡∏£‡∏ß‡∏°: {total_expend:,.2f} ‡∏ö‡∏≤‡∏ó ({percent_expend:.2f}% ‡∏Ç‡∏≠‡∏á‡∏£‡∏≤‡∏¢‡∏£‡∏±‡∏ö‡∏£‡∏ß‡∏°‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î)
    - ‡∏Ñ‡∏á‡πÄ‡∏´‡∏•‡∏∑‡∏≠: {balance:,.2f} ‡∏ö‡∏≤‡∏ó ({percent_balance:.2f}% ‡∏Ç‡∏≠‡∏á‡∏£‡∏≤‡∏¢‡∏£‡∏±‡∏ö‡∏£‡∏ß‡∏°‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î)
    """)

# ‡∏™‡∏£‡∏∏‡∏õ‡∏£‡∏ß‡∏°‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
st.markdown("### üßæ ‡∏™‡∏£‡∏∏‡∏õ‡∏†‡∏≤‡∏û‡∏£‡∏ß‡∏°‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î")
st.markdown(f"""
- ‡∏£‡∏≤‡∏¢‡∏£‡∏±‡∏ö‡∏£‡∏ß‡∏°‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î: {total_income_all:,.2f} ‡∏ö‡∏≤‡∏ó (100%)
- ‡∏£‡∏≤‡∏¢‡∏à‡πà‡∏≤‡∏¢‡∏£‡∏ß‡∏°‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î: {total_expend_all:,.2f} ‡∏ö‡∏≤‡∏ó ({(total_expend_all/total_income_all)*100:.2f}%)
- ‡∏Ñ‡∏á‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡∏£‡∏ß‡∏°: {total_balance_all:,.2f} ‡∏ö‡∏≤‡∏ó ({(total_balance_all/total_income_all)*100:.2f}%)
""")
