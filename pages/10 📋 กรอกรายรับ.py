import streamlit as st
from datetime import datetime
import pandas as pd
import os
from openpyxl import load_workbook
import re

FUND_FILE = "table/income_data.xlsx"
AR_LOOKUP_FILE = "table/ar_code.xlsx"
SPEND_LOOKUP_FILE = "table/unique_spend_code.csv"
FUNDING_SOURCE_FILE = "table/funding_source.xlsx"
FISCAL_YEAR_FILE = "table/fiscal_year.xlsx"


if st.session_state.get("reset_flag", False):
    st.session_state.clear()
    st.session_state["just_reset"] = True
    st.rerun()

@st.cache_data(ttl=60)
def load_ar_lookup():
    if os.path.exists(AR_LOOKUP_FILE):
        df = pd.read_excel(AR_LOOKUP_FILE, dtype=str).fillna("")
        df.columns = df.columns.str.strip().str.replace("\ufeff", "", regex=False)
        df = df.apply(lambda col: col.map(lambda x: x.strip() if isinstance(x, str) else x))
        return df
    return pd.DataFrame(columns=["‡∏£‡∏´‡∏±‡∏™‡πÇ‡∏Ñ‡∏£‡∏á‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡∏à‡∏±‡∏¢", "ar_code", "‡∏£‡∏´‡∏±‡∏™‡∏Ñ‡πà‡∏≤‡πÉ‡∏ä‡πâ‡∏à‡πà‡∏≤‡∏¢"])
@st.cache_data
def load_spend_lookup():
    if os.path.exists(SPEND_LOOKUP_FILE):
        return pd.read_csv(SPEND_LOOKUP_FILE, dtype=str).fillna("")
    return pd.DataFrame(columns=["‡∏£‡∏´‡∏±‡∏™‡∏Ñ‡πà‡∏≤‡πÉ‡∏ä‡πâ‡∏à‡πà‡∏≤‡∏¢", "‡∏´‡∏°‡∏ß‡∏î‡∏£‡∏≤‡∏¢‡∏à‡πà‡∏≤‡∏¢", "‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£", "‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏Ñ‡πà‡∏≤‡πÉ‡∏ä‡πâ‡∏à‡πà‡∏≤‡∏¢"])

@st.cache_data
def load_funding_source_data():
    if os.path.exists(FUNDING_SOURCE_FILE):
        return pd.read_excel(FUNDING_SOURCE_FILE, dtype=str).fillna("")
    return pd.DataFrame(columns=["‡∏£‡∏´‡∏±‡∏™‡∏á‡∏ö‡∏õ‡∏£‡∏∞‡∏°‡∏≤‡∏ì"])

@st.cache_data
def load_fiscal_year_data():
    if os.path.exists(FISCAL_YEAR_FILE):
        return pd.read_excel(FISCAL_YEAR_FILE, dtype=str).fillna("")
    return pd.DataFrame(columns=["‡∏õ‡∏µ‡∏á‡∏ö‡∏õ‡∏£‡∏∞‡∏°‡∏≤‡∏ì"])

def lookup_spend_detail(spend_code):
    df = load_spend_lookup()
    matched = df[df["‡∏£‡∏´‡∏±‡∏™‡∏Ñ‡πà‡∏≤‡πÉ‡∏ä‡πâ‡∏à‡πà‡∏≤‡∏¢"] == spend_code.strip()]
    if not matched.empty:
        return matched.iloc[0]["‡∏´‡∏°‡∏ß‡∏î‡∏£‡∏≤‡∏¢‡∏à‡πà‡∏≤‡∏¢"], matched.iloc[0]["‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£"], matched.iloc[0]["‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏Ñ‡πà‡∏≤‡πÉ‡∏ä‡πâ‡∏à‡πà‡∏≤‡∏¢"]
    return "", "", ""

def save_to_excel(df, filename):
    df.to_excel(filename, index=False)
    wb = load_workbook(filename)
    ws = wb.active
    for cell in ws['A']:
        cell.number_format = 'YYYY-MM-DD HH:mm:ss'
    wb.save(filename)

# --- Session State Setup ---
def init_session():
    st.session_state.setdefault("rounds", [0])
    st.session_state.setdefault("round_0_codes", [0])
    st.session_state.setdefault("fund_project_code", "")
    st.session_state.setdefault("fund_source", "")
    st.session_state.setdefault("fiscal_year", "")
    st.session_state.setdefault("contract_code", "")
    st.session_state.setdefault("duration_months", "")
    st.session_state.setdefault("fund_type", "")
    st.session_state.setdefault("fund_date", datetime.today())
    st.session_state.setdefault("contract_date", datetime.today())



if "rounds" not in st.session_state:
    init_session()

def add_round():
    new_idx = max(st.session_state.rounds) + 1
    st.session_state.rounds.append(new_idx)
    st.session_state[f"round_{new_idx}_codes"] = [0]

def remove_round():
    if len(st.session_state.rounds) > 1:
        last = st.session_state.rounds.pop()
        st.session_state.pop(f"round_{last}_codes", None)

def add_code(r_idx):
    st.session_state[f"round_{r_idx}_codes"].append(
        max(st.session_state[f"round_{r_idx}_codes"]) + 1
    )

def remove_code(r_idx, c_idx):
    key = f"round_{r_idx}_codes"
    if len(st.session_state[key]) > 1 and c_idx != 0:
        st.session_state[key].remove(c_idx)
st.markdown("""
    <style>
    .title-style {
        font-size:30px;
        font-weight:bold;
        color: #4a4a4a;
    }
    .section-header {
        font-size:20px;
        font-weight:bold;
        margin-top:20px;
        margin-bottom:10px;
        color: #333;
    }
    .block {
        border: 1px solid #ddd;
        border-radius: 10px;
        padding: 15px;
        margin-bottom: 10px;
        background-color: #fafafa;
    }
    </style>
""", unsafe_allow_html=True)

st.set_page_config(page_title="‡∏£‡∏∞‡∏ö‡∏ö‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏ó‡∏∏‡∏ô‡πÇ‡∏Ñ‡∏£‡∏á‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡∏à‡∏±‡∏¢", layout="wide")

# üåü Title
st.markdown('<div class="title-style">üìã ‡∏£‡∏∞‡∏ö‡∏ö‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏ó‡∏∏‡∏ô‡πÇ‡∏Ñ‡∏£‡∏á‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡∏à‡∏±‡∏¢</div>', unsafe_allow_html=True)
st.write("")
# --- Main App UI ---
ar_lookup = load_ar_lookup()
spend_lookup = load_spend_lookup()
fund_source_df = load_funding_source_data()
fund_type_list = ["","‡∏ó‡∏∏‡∏ô‡∏†‡∏≤‡∏¢‡πÉ‡∏ô", "‡∏ó‡∏∏‡∏ô‡∏†‡∏≤‡∏¢‡∏ô‡∏≠‡∏Å"]
fund_source_list1 = sorted(fund_source_df["‡∏£‡∏´‡∏±‡∏™‡∏á‡∏ö‡∏õ‡∏£‡∏∞‡∏°‡∏≤‡∏ì"].dropna().unique().tolist())
fund_source_list2 = [""] + fund_source_list1  # ‡∏´‡∏£‡∏∑‡∏≠ ["‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å"] + fund_source_list
fiscal_year_df = load_fiscal_year_data()
fiscal_year_list1 = sorted(fiscal_year_df["‡∏õ‡∏µ‡∏á‡∏ö‡∏õ‡∏£‡∏∞‡∏°‡∏≤‡∏ì"].dropna().unique().tolist())
fiscal_year_list2 = [""] + fiscal_year_list1  # ‡∏´‡∏£‡∏∑‡∏≠ ["‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å"] + fund_source_list
st.set_page_config(page_title="‡∏£‡∏∞‡∏ö‡∏ö‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏ó‡∏∏‡∏ô‡πÇ‡∏Ñ‡∏£‡∏á‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡∏à‡∏±‡∏¢", layout="wide")
st.title("‡∏£‡∏∞‡∏ö‡∏ö‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏ó‡∏∏‡∏ô‡πÇ‡∏Ñ‡∏£‡∏á‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡∏à‡∏±‡∏¢")

# ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏Ñ‡πà‡∏≤‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô session_state ‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô list ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô error
if "fund_source" not in st.session_state or st.session_state.fund_source not in fund_source_list2:
    st.session_state.fund_source = fund_source_list2[0] if fund_source_list2 else ""

# ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏Ñ‡πà‡∏≤‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô session_state ‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô list ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô error
if "fiscal_year" not in st.session_state or st.session_state.fund_source not in fiscal_year_list2:
    st.session_state.fiscal_year = fiscal_year_list2[0] if fiscal_year_list2 else ""

# ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡πà‡∏≤‡∏´‡∏•‡∏±‡∏á reset ‡πÅ‡∏•‡∏∞‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ default ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô list
if st.session_state.get("fund_source", "") not in fund_source_list2:
    st.session_state.fund_source = fund_source_list2[0] if fund_source_list2 else ""

if st.session_state.get("fiscal_year", "") not in fiscal_year_list2:
    st.session_state.fiscal_year = fiscal_year_list2[0] if fiscal_year_list2 else ""


st.session_state.fund_date = st.date_input("‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏Å‡∏£‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•", value=st.session_state.fund_date)
st.session_state.fiscal_year = st.selectbox("‡∏õ‡∏µ‡∏á‡∏ö‡∏õ‡∏£‡∏∞‡∏°‡∏≤‡∏ì",fiscal_year_list2,index=fiscal_year_list2.index(st.session_state.fiscal_year))
st.session_state.fund_project_code = st.text_input("‡∏£‡∏´‡∏±‡∏™‡πÇ‡∏Ñ‡∏£‡∏á‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡∏à‡∏±‡∏¢", value=st.session_state.fund_project_code).strip().upper()
pattern_fund_project_code = r"^E\d{4}_\d{3}$"
if not re.match(pattern_fund_project_code, st.session_state.fund_project_code):
    st.warning("‡∏£‡∏´‡∏±‡∏™‡πÇ‡∏Ñ‡∏£‡∏á‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡∏à‡∏±‡∏¢‡∏ï‡πâ‡∏≠‡∏á‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö EXXXX_XXX (‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á: E2568_001)")
st.session_state.fund_type = st.selectbox("‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏ó‡∏∏‡∏ô", fund_type_list, index=fund_type_list.index(st.session_state.fund_type))
st.session_state.fund_source = st.selectbox("‡∏£‡∏´‡∏±‡∏™‡∏á‡∏ö‡∏õ‡∏£‡∏∞‡∏°‡∏≤‡∏ì",fund_source_list2,index=fund_source_list2.index(st.session_state.fund_source))
st.session_state.contract_date = st.date_input("‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏ã‡πá‡∏ô‡∏™‡∏±‡∏ç‡∏ç‡∏≤", value=st.session_state.contract_date)
# st.session_state.duration_months = st.number_input("‡∏£‡∏∞‡∏¢‡∏∞‡πÄ‡∏ß‡∏•‡∏≤‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡πÇ‡∏Ñ‡∏£‡∏á‡∏Å‡∏≤‡∏£ (‡πÄ‡∏î‡∏∑‡∏≠‡∏ô)", min_value=1, step=1, value=st.session_state.duration_months)
duration_str = st.text_input("‡∏£‡∏∞‡∏¢‡∏∞‡πÄ‡∏ß‡∏•‡∏≤‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡πÇ‡∏Ñ‡∏£‡∏á‡∏Å‡∏≤‡∏£ (‡πÄ‡∏î‡∏∑‡∏≠‡∏ô)", value=str(st.session_state.get("duration_months", "")))
try:
    duration_val = int(duration_str)
except ValueError:
    duration_val = None

if duration_val is None or duration_val <= 0:
    st.warning("‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏ï‡πá‡∏°‡∏ó‡∏µ‡πà‡∏°‡∏≤‡∏Å‡∏Å‡∏ß‡πà‡∏≤ 0 ‡πÉ‡∏ô‡∏ä‡πà‡∏≠‡∏á‡∏£‡∏∞‡∏¢‡∏∞‡πÄ‡∏ß‡∏•‡∏≤‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡πÇ‡∏Ñ‡∏£‡∏á‡∏Å‡∏≤‡∏£")
else:
    st.session_state.duration_months = duration_val

st.session_state.contract_code = st.text_input("‡∏£‡∏´‡∏±‡∏™‡∏™‡∏±‡∏ç‡∏ç‡∏≤", value=st.session_state.contract_code)
pattern_contract_code = r"^CHR\d{3}/\d{4}$"
if not re.match(pattern_contract_code, st.session_state.contract_code):
    st.warning("‡∏£‡∏´‡∏±‡∏™‡∏™‡∏±‡∏ç‡∏ç‡∏≤‡∏ï‡πâ‡∏≠‡∏á‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö CHRXXX/XXXX (‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á: CHR001/2568)")


fund_project_code = st.session_state.fund_project_code
project_ar_codes = ar_lookup[ar_lookup["‡∏£‡∏´‡∏±‡∏™‡πÇ‡∏Ñ‡∏£‡∏á‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡∏à‡∏±‡∏¢"].str.upper() == fund_project_code]["ar_code"].unique().tolist()
has_ar = len(project_ar_codes) > 0

# --- ‡∏£‡∏≠‡∏ö (‡∏á‡∏ß‡∏î)
for r_idx in st.session_state.rounds:
    with st.expander(f"üì¶ ‡∏á‡∏ß‡∏î‡∏ó‡∏µ‡πà {r_idx+1}", expanded=True):
        st.markdown(f"### ‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏á‡∏ß‡∏î‡∏ó‡∏µ‡πà {r_idx+1}")

        key_codes = f"round_{r_idx}_codes"
        if key_codes not in st.session_state:
            st.session_state[key_codes] = [0]

        if has_ar:
            # 1. ‡∏™‡πà‡∏ß‡∏ô ar_code ‡∏ï‡∏≤‡∏°‡πÄ‡∏î‡∏¥‡∏°
            ar_selected_list = st.multiselect(f"üîó ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å AR code ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏á‡∏ß‡∏î‡∏ó‡∏µ‡πà {r_idx+1}", project_ar_codes, key=f"ar_{r_idx}_multi")
            for ar_idx, ar_selected in enumerate(ar_selected_list):
                st.markdown(f'#### üéØ AR code: {ar_selected}')
                rows = ar_lookup[
                    (ar_lookup["‡∏£‡∏´‡∏±‡∏™‡πÇ‡∏Ñ‡∏£‡∏á‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡∏à‡∏±‡∏¢"] == fund_project_code) &
                    (ar_lookup["ar_code"] == ar_selected)
                ]
                for i, row in rows.iterrows():
                    spend = row["‡∏£‡∏´‡∏±‡∏™‡∏Ñ‡πà‡∏≤‡πÉ‡∏ä‡πâ‡∏à‡πà‡∏≤‡∏¢"]
                    cat, item, cost_type = lookup_spend_detail(spend)

                    col1, col2 = st.columns([2, 3])
                    with col1:
                        st.text_input("üî¢ ‡∏£‡∏´‡∏±‡∏™‡∏Ñ‡πà‡∏≤‡πÉ‡∏ä‡πâ‡∏à‡πà‡∏≤‡∏¢", value=spend, key=f"code_{r_idx}_{ar_idx}_{i}", disabled=True)
                    with col2:
                        st.text_input("üìÇ ‡∏´‡∏°‡∏ß‡∏î‡∏£‡∏≤‡∏¢‡∏à‡πà‡∏≤‡∏¢", value=cat, key=f"cat_{r_idx}_{ar_idx}_{i}", disabled=True)
                        st.text_input("üìå ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£", value=item, key=f"item_{r_idx}_{ar_idx}_{i}", disabled=True)
                        st.text_input("üßæ ‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏Ñ‡πà‡∏≤‡πÉ‡∏ä‡πâ‡∏à‡πà‡∏≤‡∏¢", value=cost_type, key=f"cost_{r_idx}_{ar_idx}_{i}", disabled=True)
                        st.number_input("üí∞ ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏á‡∏¥‡∏ô", min_value=0.0, step=100.0, key=f"amt_{r_idx}_{ar_idx}_{i}")

            # 2. ‡∏™‡πà‡∏ß‡∏ô‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏£‡∏´‡∏±‡∏™‡∏Ñ‡πà‡∏≤‡πÉ‡∏ä‡πâ‡∏à‡πà‡∏≤‡∏¢‡∏ô‡∏≠‡∏Å ar code (‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô‡∏ï‡∏≠‡∏ô‡πÑ‡∏°‡πà‡∏°‡∏µ ar code)
            st.markdown("#### ‚ûï ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏£‡∏´‡∏±‡∏™‡∏Ñ‡πà‡∏≤‡πÉ‡∏ä‡πâ‡∏à‡πà‡∏≤‡∏¢‡∏ô‡∏≠‡∏Å‡∏Å‡∏•‡∏∏‡πà‡∏° AR code")
            for c_idx in st.session_state[key_codes]:
                code_col, detail_col = st.columns([2, 5])
                with code_col:
                    code = st.text_input(f"üî¢ ‡∏£‡∏´‡∏±‡∏™‡∏Ñ‡πà‡∏≤‡πÉ‡∏ä‡πâ‡∏à‡πà‡∏≤‡∏¢ (‡∏á‡∏ß‡∏î {r_idx+1} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£ {c_idx+1})", key=f"round_{r_idx}_code_{c_idx}")
                cat, item, cost_type = lookup_spend_detail(code)
                with detail_col:
                    col1, col2 = st.columns(2)
                    with col1:
                        st.text_input("üìÇ ‡∏´‡∏°‡∏ß‡∏î‡∏£‡∏≤‡∏¢‡∏à‡πà‡∏≤‡∏¢", value=cat, key=f"cat_{r_idx}_{c_idx}")
                        st.text_input("üìå ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£", value=item, key=f"item_{r_idx}_{c_idx}")
                        st.text_input("üßæ ‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏Ñ‡πà‡∏≤‡πÉ‡∏ä‡πâ‡∏à‡πà‡∏≤‡∏¢", value=cost_type, key=f"cost_{r_idx}_{c_idx}")
                        st.number_input("üí∞ ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏á‡∏¥‡∏ô", min_value=0.0, step=100.0, key=f"amt_free_{r_idx}_{c_idx}")
                if c_idx != 0:
                    if st.button(f"‚ûñ ‡∏•‡∏ö‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£ (‡∏á‡∏ß‡∏î {r_idx+1} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£ {c_idx+1})", key=f"btn_remove_{r_idx}_{c_idx}"):
                        remove_code(r_idx, c_idx)
                        st.rerun()
            if st.button(f"‚ûï ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏£‡∏´‡∏±‡∏™‡∏Ñ‡πà‡∏≤‡πÉ‡∏ä‡πâ‡∏à‡πà‡∏≤‡∏¢ (‡∏á‡∏ß‡∏î {r_idx+1})", key=f"btn_add_code_{r_idx}"):
                add_code(r_idx)
                st.rerun()

        else:
            # ‡∏Å‡∏£‡∏ì‡∏µ‡πÑ‡∏°‡πà‡∏°‡∏µ ar code ‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô‡πÄ‡∏î‡∏¥‡∏°
            for c_idx in st.session_state[key_codes]:
                code_col, detail_col = st.columns([2, 5])
                with code_col:
                    code = st.text_input(f"üî¢ ‡∏£‡∏´‡∏±‡∏™‡∏Ñ‡πà‡∏≤‡πÉ‡∏ä‡πâ‡∏à‡πà‡∏≤‡∏¢ (‡∏á‡∏ß‡∏î {r_idx+1} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£ {c_idx+1})", key=f"round_{r_idx}_code_{c_idx}")
                cat, item, cost_type = lookup_spend_detail(code)
                with detail_col:
                    col1, col2 = st.columns(2)
                    with col1:
                        st.text_input("üìÇ ‡∏´‡∏°‡∏ß‡∏î‡∏£‡∏≤‡∏¢‡∏à‡πà‡∏≤‡∏¢", value=cat, key=f"cat_{r_idx}_{c_idx}")
                        st.text_input("üìå ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£", value=item, key=f"item_{r_idx}_{c_idx}")
                        st.text_input("üßæ ‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏Ñ‡πà‡∏≤‡πÉ‡∏ä‡πâ‡∏à‡πà‡∏≤‡∏¢", value=cost_type, key=f"cost_{r_idx}_{c_idx}")
                        st.number_input("üí∞ ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏á‡∏¥‡∏ô", min_value=0.0, step=100.0, key=f"amt_{r_idx}_{c_idx}")
                if c_idx != 0:
                    if st.button(f"‚ûñ ‡∏•‡∏ö‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£ (‡∏á‡∏ß‡∏î {r_idx+1} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£ {c_idx+1})", key=f"btn_remove_{r_idx}_{c_idx}"):
                        remove_code(r_idx, c_idx)
                        st.rerun()
            if st.button(f"‚ûï ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏£‡∏´‡∏±‡∏™‡∏Ñ‡πà‡∏≤‡πÉ‡∏ä‡πâ‡∏à‡πà‡∏≤‡∏¢ (‡∏á‡∏ß‡∏î {r_idx+1})", key=f"btn_add_code_{r_idx}"):
                add_code(r_idx)
                st.rerun()
        # ‡∏£‡∏ß‡∏°‡∏¢‡∏≠‡∏î‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏á‡∏ß‡∏î
        total_amt = 0.0
        if has_ar:
            # ‡∏¢‡∏≠‡∏î‡∏à‡∏≤‡∏Å ar_code
            ar_selected_list = st.session_state.get(f"ar_{r_idx}_multi", [])
            for ar_idx, ar_code in enumerate(ar_selected_list):
                rows = ar_lookup[
                    (ar_lookup["‡∏£‡∏´‡∏±‡∏™‡πÇ‡∏Ñ‡∏£‡∏á‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡∏à‡∏±‡∏¢"] == fund_project_code) &
                    (ar_lookup["ar_code"] == ar_code)
                ]
                for idx, _ in rows.iterrows():
                    total_amt += st.session_state.get(f"amt_{r_idx}_{ar_idx}_{idx}", 0.0)

            # ‡∏¢‡∏≠‡∏î‡∏à‡∏≤‡∏Å‡∏£‡∏´‡∏±‡∏™‡∏Ñ‡πà‡∏≤‡πÉ‡∏ä‡πâ‡∏à‡πà‡∏≤‡∏¢‡∏≠‡∏¥‡∏™‡∏£‡∏∞‡∏ô‡∏≠‡∏Å‡∏Å‡∏•‡∏∏‡πà‡∏° ar_code
            for c_idx in st.session_state.get(f"round_{r_idx}_codes", [0]):
                total_amt += st.session_state.get(f"amt_free_{r_idx}_{c_idx}", 0.0)

        else:
            # ‡∏Å‡∏£‡∏ì‡∏µ‡πÑ‡∏°‡πà‡∏°‡∏µ ar_code
            for c_idx in st.session_state.get(f"round_{r_idx}_codes", [0]):
                total_amt += st.session_state.get(f"amt_{r_idx}_{c_idx}", 0.0)
        st.info(f"üíµ ‡∏¢‡∏≠‡∏î‡∏£‡∏ß‡∏°‡∏á‡∏ß‡∏î‡∏ó‡∏µ‡πà {r_idx+1}: {total_amt:,.2f} ‡∏ö‡∏≤‡∏ó")

# ‡∏õ‡∏∏‡πà‡∏°‡πÄ‡∏û‡∏¥‡πà‡∏°/‡∏•‡∏ö‡∏á‡∏ß‡∏î
cols = st.columns([8, 1, 1])
cols[1].button("‚ûï ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏á‡∏ß‡∏î", on_click=add_round, key="btn_add_round")
if len(st.session_state.rounds) > 1:
    cols[2].button("‚ûñ ‡∏•‡∏ö‡∏á‡∏ß‡∏î", on_click=remove_round, key="btn_remove_round")

# --- Reset function ---
def reset_form():
    tmp_rows = st.session_state.get("__tmp_new_rows__", None)

    st.session_state.clear()  # ‡πÄ‡∏Ñ‡∏•‡∏µ‡∏¢‡∏£‡πå‡∏ó‡∏∏‡∏Å‡∏≠‡∏¢‡πà‡∏≤‡∏á
    
    if tmp_rows is not None:
        st.session_state["__tmp_new_rows__"] = tmp_rows  # ‡πÄ‡∏Å‡πá‡∏ö‡πÑ‡∏ß‡πâ‡∏ï‡πà‡∏≠

    st.session_state["just_reset"] = True
    st.rerun()

total_all = 0.0
for r_idx in st.session_state.rounds:
    if has_ar:
        # ‡∏¢‡∏≠‡∏î‡∏à‡∏≤‡∏Å ar_code
        ar_selected_list = st.session_state.get(f"ar_{r_idx}_multi", [])
        for ar_idx, ar_code in enumerate(ar_selected_list):
            rows = ar_lookup[
                (ar_lookup["‡∏£‡∏´‡∏±‡∏™‡πÇ‡∏Ñ‡∏£‡∏á‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡∏à‡∏±‡∏¢"] == fund_project_code) &
                (ar_lookup["ar_code"] == ar_code)
            ]
            for idx, _ in rows.iterrows():
                total_all += st.session_state.get(f"amt_{r_idx}_{ar_idx}_{idx}", 0.0)

        # ‡∏¢‡∏≠‡∏î‡∏à‡∏≤‡∏Å‡∏£‡∏´‡∏±‡∏™‡∏Ñ‡πà‡∏≤‡πÉ‡∏ä‡πâ‡∏à‡πà‡∏≤‡∏¢‡∏≠‡∏¥‡∏™‡∏£‡∏∞‡∏ô‡∏≠‡∏Å‡∏Å‡∏•‡∏∏‡πà‡∏° ar_code
        for c_idx in st.session_state.get(f"round_{r_idx}_codes", [0]):
            total_all += st.session_state.get(f"amt_free_{r_idx}_{c_idx}", 0.0)
    else:
        for c_idx in st.session_state.get(f"round_{r_idx}_codes", [0]):
            total_all += st.session_state.get(f"amt_{r_idx}_{c_idx}", 0.0)

st.markdown("---")
st.markdown(f"## üí∞ ‡∏¢‡∏≠‡∏î‡∏£‡∏ß‡∏°‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î: {total_all:,.2f} ‡∏ö‡∏≤‡∏ó")


form_valid  = (
    st.session_state.fiscal_year != "" and
    st.session_state.fund_source != "" and
    st.session_state.fund_type != "" and
    st.session_state.fund_project_code != "" and
    st.session_state.contract_code != "" and
    st.session_state.rounds != "" and
    duration_str != "" and
    re.match(pattern_fund_project_code, st.session_state.fund_project_code) and
    re.match(pattern_contract_code, st.session_state.contract_code)
)

if not form_valid:
    st.error("‚ö†Ô∏è ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡πâ‡∏Ñ‡∏£‡∏ö‡∏ñ‡πâ‡∏ß‡∏ô‡πÅ‡∏•‡∏∞‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡πà‡∏≠‡∏ô‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å")

# ‡∏õ‡∏∏‡πà‡∏°‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å (‡∏à‡∏∞ disabled ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà valid)
if st.button("üíæ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏∏‡∏ô‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î", disabled=not form_valid, key="btn_save_all"):
    all_rows = []
    for r_idx in st.session_state.rounds:
        round_num = r_idx + 1
        if has_ar:
            # ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏à‡∏≤‡∏Å ar_code ‡∏ï‡∏≤‡∏°‡πÄ‡∏î‡∏¥‡∏°
            ar_selected_list = st.session_state.get(f"ar_{r_idx}_multi", [])
            for ar_idx, ar_code in enumerate(ar_selected_list):
                rows = ar_lookup[
                    (ar_lookup["‡∏£‡∏´‡∏±‡∏™‡πÇ‡∏Ñ‡∏£‡∏á‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡∏à‡∏±‡∏¢"] == fund_project_code) &
                    (ar_lookup["ar_code"] == ar_code)
                ]
                for idx, row in rows.iterrows():
                    spend = row["‡∏£‡∏´‡∏±‡∏™‡∏Ñ‡πà‡∏≤‡πÉ‡∏ä‡πâ‡∏à‡πà‡∏≤‡∏¢"]
                    cat, item, cost_type = lookup_spend_detail(spend)
                    amt = st.session_state.get(f"amt_{r_idx}_{ar_idx}_{idx}", 0.0)
                    all_rows.append({
                        "‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏Å‡∏£‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•": datetime.combine(st.session_state.fund_date, datetime.now().time()),
                        "‡∏õ‡∏µ‡∏á‡∏ö‡∏õ‡∏£‡∏∞‡∏°‡∏≤‡∏ì" : st.session_state.fiscal_year,
                        "‡∏£‡∏´‡∏±‡∏™‡πÇ‡∏Ñ‡∏£‡∏á‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡∏à‡∏±‡∏¢": fund_project_code,
                        "‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏ó‡∏∏‡∏ô": st.session_state.fund_type,
                        "‡∏£‡∏´‡∏±‡∏™‡∏á‡∏ö‡∏õ‡∏£‡∏∞‡∏°‡∏≤‡∏ì" : st.session_state.fund_source,
                        "‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏ã‡∏ô‡∏™‡∏±‡∏ç‡∏ç‡∏≤": st.session_state.contract_date,
                        "‡∏£‡∏∞‡∏¢‡∏∞‡πÄ‡∏ß‡∏•‡∏≤‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡πÇ‡∏Ñ‡∏£‡∏á‡∏Å‡∏≤‡∏£ (‡πÄ‡∏î‡∏∑‡∏≠‡∏ô)": st.session_state.duration_months,
                        "‡∏£‡∏´‡∏±‡∏™‡∏™‡∏±‡∏ç‡∏ç‡∏≤": st.session_state.contract_code,
                        "‡∏á‡∏ß‡∏î": round_num,
                        "ar_code": ar_code,
                        "‡∏£‡∏´‡∏±‡∏™‡∏Ñ‡πà‡∏≤‡πÉ‡∏ä‡πâ‡∏à‡πà‡∏≤‡∏¢": spend,
                        "‡∏´‡∏°‡∏ß‡∏î‡∏£‡∏≤‡∏¢‡∏à‡πà‡∏≤‡∏¢": cat,
                        "‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£": item,
                        "‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏Ñ‡πà‡∏≤‡πÉ‡∏ä‡πâ‡∏à‡πà‡∏≤‡∏¢": cost_type,
                        "‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏á‡∏¥‡∏ô": amt
                    })
            # **‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏£‡∏´‡∏±‡∏™‡∏Ñ‡πà‡∏≤‡πÉ‡∏ä‡πâ‡∏à‡πà‡∏≤‡∏¢‡∏ô‡∏≠‡∏Å‡∏Å‡∏•‡∏∏‡πà‡∏° AR code ‡∏î‡πâ‡∏ß‡∏¢**
            for c_idx in st.session_state.get(f"round_{r_idx}_codes", [0]):
                code = st.session_state.get(f"round_{r_idx}_code_{c_idx}", "").strip()
                if code == "":
                    continue
                cat = st.session_state.get(f"cat_{r_idx}_{c_idx}", "")
                item = st.session_state.get(f"item_{r_idx}_{c_idx}", "")
                cost_type = st.session_state.get(f"cost_{r_idx}_{c_idx}", "")
                amt = st.session_state.get(f"amt_free_{r_idx}_{c_idx}", 0.0)
                all_rows.append({
                    "‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏Å‡∏£‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•": datetime.combine(st.session_state.fund_date, datetime.now().time()),
                    "‡∏õ‡∏µ‡∏á‡∏ö‡∏õ‡∏£‡∏∞‡∏°‡∏≤‡∏ì" : st.session_state.fiscal_year,
                    "‡∏£‡∏´‡∏±‡∏™‡πÇ‡∏Ñ‡∏£‡∏á‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡∏à‡∏±‡∏¢": fund_project_code,
                    "‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏ó‡∏∏‡∏ô": st.session_state.fund_type,
                    "‡∏£‡∏´‡∏±‡∏™‡∏á‡∏ö‡∏õ‡∏£‡∏∞‡∏°‡∏≤‡∏ì" : st.session_state.fund_source,
                    "‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏ã‡∏ô‡∏™‡∏±‡∏ç‡∏ç‡∏≤": st.session_state.contract_date,
                    "‡∏£‡∏∞‡∏¢‡∏∞‡πÄ‡∏ß‡∏•‡∏≤‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡πÇ‡∏Ñ‡∏£‡∏á‡∏Å‡∏≤‡∏£ (‡πÄ‡∏î‡∏∑‡∏≠‡∏ô)": st.session_state.duration_months,
                    "‡∏£‡∏´‡∏±‡∏™‡∏™‡∏±‡∏ç‡∏ç‡∏≤": st.session_state.contract_code,
                    "‡∏á‡∏ß‡∏î": round_num,
                    "ar_code": "",  # ‡πÑ‡∏°‡πà‡∏°‡∏µ ar_code ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏£‡∏´‡∏±‡∏™‡∏ô‡∏≠‡∏Å‡∏Å‡∏•‡∏∏‡πà‡∏°
                    "‡∏£‡∏´‡∏±‡∏™‡∏Ñ‡πà‡∏≤‡πÉ‡∏ä‡πâ‡∏à‡πà‡∏≤‡∏¢": code,
                    "‡∏´‡∏°‡∏ß‡∏î‡∏£‡∏≤‡∏¢‡∏à‡πà‡∏≤‡∏¢": cat,
                    "‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£": item,
                    "‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏Ñ‡πà‡∏≤‡πÉ‡∏ä‡πâ‡∏à‡πà‡∏≤‡∏¢": cost_type,
                    "‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏á‡∏¥‡∏ô": amt
                })
        else:
            # ‡∏Å‡∏£‡∏ì‡∏µ‡πÑ‡∏°‡πà‡∏°‡∏µ ar_code ‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô‡πÄ‡∏î‡∏¥‡∏°
            for c_idx in st.session_state.get(f"round_{r_idx}_codes", [0]):
                code = st.session_state.get(f"round_{r_idx}_code_{c_idx}", "").strip()
                if code == "":
                    continue
                cat = st.session_state.get(f"cat_{r_idx}_{c_idx}", "")
                item = st.session_state.get(f"item_{r_idx}_{c_idx}", "")
                cost_type = st.session_state.get(f"cost_{r_idx}_{c_idx}", "")
                amt = st.session_state.get(f"amt_{r_idx}_{c_idx}", 0.0)
                all_rows.append({
                    "‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏Å‡∏£‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•": datetime.combine(st.session_state.fund_date, datetime.now().time()),
                    "‡∏õ‡∏µ‡∏á‡∏ö‡∏õ‡∏£‡∏∞‡∏°‡∏≤‡∏ì" : st.session_state.fiscal_year,
                    "‡∏£‡∏´‡∏±‡∏™‡πÇ‡∏Ñ‡∏£‡∏á‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡∏à‡∏±‡∏¢": fund_project_code,
                    "‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏ó‡∏∏‡∏ô": st.session_state.fund_type,
                    "‡∏£‡∏´‡∏±‡∏™‡∏á‡∏ö‡∏õ‡∏£‡∏∞‡∏°‡∏≤‡∏ì" : st.session_state.fund_source,
                    "‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏ã‡∏ô‡∏™‡∏±‡∏ç‡∏ç‡∏≤": st.session_state.contract_date,
                    "‡∏£‡∏∞‡∏¢‡∏∞‡πÄ‡∏ß‡∏•‡∏≤‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡πÇ‡∏Ñ‡∏£‡∏á‡∏Å‡∏≤‡∏£ (‡πÄ‡∏î‡∏∑‡∏≠‡∏ô)": st.session_state.duration_months,
                    "‡∏£‡∏´‡∏±‡∏™‡∏™‡∏±‡∏ç‡∏ç‡∏≤": st.session_state.contract_code,
                    "‡∏á‡∏ß‡∏î": round_num,
                    "ar_code": "",
                    "‡∏£‡∏´‡∏±‡∏™‡∏Ñ‡πà‡∏≤‡πÉ‡∏ä‡πâ‡∏à‡πà‡∏≤‡∏¢": code,
                    "‡∏´‡∏°‡∏ß‡∏î‡∏£‡∏≤‡∏¢‡∏à‡πà‡∏≤‡∏¢": cat,
                    "‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£": item,
                    "‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏Ñ‡πà‡∏≤‡πÉ‡∏ä‡πâ‡∏à‡πà‡∏≤‡∏¢": cost_type,
                    "‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏á‡∏¥‡∏ô": amt
                })

    if all_rows:
        df = pd.DataFrame(all_rows)
        if os.path.exists(FUND_FILE):
            old_df = pd.read_excel(FUND_FILE)
            df = pd.concat([old_df, df], ignore_index=True)

        save_to_excel(df, FUND_FILE)
        st.success("‚úÖ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏∏‡∏ô‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß")
        st.cache_data.clear()
        
        st.session_state["__tmp_new_rows__"] = all_rows
        reset_form()




# --- ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏£‡∏µ‡πÄ‡∏ã‡∏ï‡πÄ‡∏™‡∏£‡πá‡∏à ‡πÉ‡∏´‡πâ‡∏Ñ‡∏∑‡∏ô‡∏Ñ‡πà‡∏≤ new_rows ‡∏Å‡∏•‡∏±‡∏ö‡∏°‡∏≤ ---
if st.session_state.get("just_reset", False):
    if "__tmp_new_rows__" in st.session_state:
        st.session_state["new_rows"] = st.session_state["__tmp_new_rows__"]
        del st.session_state["__tmp_new_rows__"]

    st.success("üîÑ ‡∏ü‡∏≠‡∏£‡πå‡∏°‡∏ñ‡∏π‡∏Å‡∏£‡∏µ‡πÄ‡∏ã‡∏ï‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß")
    del st.session_state["just_reset"]


if "new_rows" in st.session_state:
    new_rows_df = pd.DataFrame(st.session_state["new_rows"])
    st.subheader("üìã ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡πÄ‡∏û‡∏¥‡πà‡∏á‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î")
    st.dataframe(new_rows_df.astype(str))