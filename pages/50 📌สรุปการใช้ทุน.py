import streamlit as st
import pandas as pd
import plotly.express as px

st.set_page_config(page_title="‡∏Å‡∏£‡∏≤‡∏ü‡∏ó‡∏∏‡∏ô", layout="wide")

TOTAL_BUDGET = 5_000_000
DATA_FILE = "table/income_data.xlsx"

@st.cache_data
def load_data():
    return pd.read_excel(DATA_FILE)

df = load_data()
st.set_page_config(page_title="‡∏™‡∏£‡∏∏‡∏õ‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏ó‡∏∏‡∏ô)", layout="wide")
st.title("üìã üìä ‡∏™‡∏£‡∏∏‡∏õ‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏ó‡∏∏‡∏ô (‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏ó‡∏∏‡∏ô‡∏†‡∏≤‡∏¢‡πÉ‡∏ô)")


if df.empty:
    st.error("‚ùå ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô‡πÑ‡∏ü‡∏•‡πå income_data.xlsx ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡πà‡∏≠‡∏ô")
else:
    required_cols = ['‡∏£‡∏´‡∏±‡∏™‡πÇ‡∏Ñ‡∏£‡∏á‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡∏à‡∏±‡∏¢', '‡∏´‡∏°‡∏ß‡∏î‡∏£‡∏≤‡∏¢‡∏à‡πà‡∏≤‡∏¢', '‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏á‡∏¥‡∏ô', '‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏ó‡∏∏‡∏ô']
    missing_cols = [col for col in required_cols if col not in df.columns]

    if missing_cols:
        st.error(f"‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå: {', '.join(missing_cols)} ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÑ‡∏ü‡∏•‡πå")
    else:
        internal_df = df[df['‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏ó‡∏∏‡∏ô'] == '‡∏ó‡∏∏‡∏ô‡∏†‡∏≤‡∏¢‡πÉ‡∏ô'].copy()

        if internal_df.empty:
            st.warning("‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó '‡∏ó‡∏∏‡∏ô‡∏†‡∏≤‡∏¢‡πÉ‡∏ô'")
        else:
            summary = internal_df.groupby('‡∏£‡∏´‡∏±‡∏™‡πÇ‡∏Ñ‡∏£‡∏á‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡∏à‡∏±‡∏¢')['‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏á‡∏¥‡∏ô'].sum().reset_index()
            summary['‡∏™‡∏±‡∏î‡∏™‡πà‡∏ß‡∏ô‡∏à‡∏≤‡∏Å‡πÄ‡∏á‡∏¥‡∏ô‡∏ó‡∏∏‡∏ô‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î'] = (summary['‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏á‡∏¥‡∏ô'] / TOTAL_BUDGET) * 100

            formatted_summary = summary.copy()
            formatted_summary['‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏á‡∏¥‡∏ô'] = formatted_summary['‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏á‡∏¥‡∏ô'].apply(lambda x: f"{x:,.0f}")
            formatted_summary['‡∏™‡∏±‡∏î‡∏™‡πà‡∏ß‡∏ô‡∏à‡∏≤‡∏Å‡πÄ‡∏á‡∏¥‡∏ô‡∏ó‡∏∏‡∏ô‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î'] = formatted_summary['‡∏™‡∏±‡∏î‡∏™‡πà‡∏ß‡∏ô‡∏à‡∏≤‡∏Å‡πÄ‡∏á‡∏¥‡∏ô‡∏ó‡∏∏‡∏ô‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î'].apply(lambda x: f"{x:.2f} %")
            

            pie_data = summary[['‡∏£‡∏´‡∏±‡∏™‡πÇ‡∏Ñ‡∏£‡∏á‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡∏à‡∏±‡∏¢', '‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏á‡∏¥‡∏ô']].copy()
            total_used = pie_data['‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏á‡∏¥‡∏ô'].sum()
            remaining = TOTAL_BUDGET - total_used

            # ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÅ‡∏ñ‡∏ß‡∏Ñ‡∏á‡πÄ‡∏´‡∏•‡∏∑‡∏≠
            pie_data = pd.concat([
                pie_data,
                pd.DataFrame([{
                    '‡∏£‡∏´‡∏±‡∏™‡πÇ‡∏Ñ‡∏£‡∏á‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡∏à‡∏±‡∏¢': '‡∏Ñ‡∏á‡πÄ‡∏´‡∏•‡∏∑‡∏≠',
                    '‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏á‡∏¥‡∏ô': remaining
                }])
            ], ignore_index=True)
            # ‚úÖ ‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏ä‡∏∑‡πà‡∏≠‡πÇ‡∏Ñ‡∏£‡∏á‡∏Å‡∏≤‡∏£ A-Z ‡πÅ‡∏•‡πâ‡∏ß‡∏ï‡∏≤‡∏°‡∏î‡πâ‡∏ß‡∏¢ '‡∏Ñ‡∏á‡πÄ‡∏´‡∏•‡∏∑‡∏≠'
            project_names = sorted(pie_data[pie_data['‡∏£‡∏´‡∏±‡∏™‡πÇ‡∏Ñ‡∏£‡∏á‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡∏à‡∏±‡∏¢'] != '‡∏Ñ‡∏á‡πÄ‡∏´‡∏•‡∏∑‡∏≠']['‡∏£‡∏´‡∏±‡∏™‡πÇ‡∏Ñ‡∏£‡∏á‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡∏à‡∏±‡∏¢'].unique().tolist())
            project_names.append('‡∏Ñ‡∏á‡πÄ‡∏´‡∏•‡∏∑‡∏≠')
            pie_data['‡∏£‡∏´‡∏±‡∏™‡πÇ‡∏Ñ‡∏£‡∏á‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡∏à‡∏±‡∏¢'] = pd.Categorical(
                pie_data['‡∏£‡∏´‡∏±‡∏™‡πÇ‡∏Ñ‡∏£‡∏á‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡∏à‡∏±‡∏¢'],
                categories=project_names,
                ordered=True
            )
            fig = px.pie(
                pie_data,
                names='‡∏£‡∏´‡∏±‡∏™‡πÇ‡∏Ñ‡∏£‡∏á‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡∏à‡∏±‡∏¢',
                values='‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏á‡∏¥‡∏ô',
                hole=0,
                color='‡∏£‡∏´‡∏±‡∏™‡πÇ‡∏Ñ‡∏£‡∏á‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡∏à‡∏±‡∏¢',
                color_discrete_map={'‡∏Ñ‡∏á‡πÄ‡∏´‡∏•‡∏∑‡∏≠': '#d3d3d3'  # ‡∏ö‡∏±‡∏á‡∏Ñ‡∏±‡∏ö‡πÉ‡∏´‡πâ‡∏™‡∏µ "‡∏Ñ‡∏á‡πÄ‡∏´‡∏•‡∏∑‡∏≠" ‡πÄ‡∏õ‡πá‡∏ô‡∏™‡∏µ‡πÄ‡∏ó‡∏≤
                                    },
                color_discrete_sequence=px.colors.qualitative.Vivid, ## Plotly, Pastel, Dark24, Vivid, Bold, Prism, Safe
                category_orders={
                    '‡∏£‡∏´‡∏±‡∏™‡πÇ‡∏Ñ‡∏£‡∏á‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡∏à‡∏±‡∏¢': project_names  # ‚úÖ ‡∏ö‡∏±‡∏á‡∏Ñ‡∏±‡∏ö‡∏•‡∏≥‡∏î‡∏±‡∏ö‡πÅ‡∏™‡∏î‡∏á‡πÉ‡∏ô‡∏Å‡∏£‡∏≤‡∏ü
                    }
            )

            fig.update_layout(
                height=600,  # ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏π‡∏á
                font=dict(family="Tahoma", size=20, color="black"),
                legend_title_text="",  # ‚ùå ‡∏ã‡πà‡∏≠‡∏ô‡∏Ñ‡∏≥‡∏ß‡πà‡∏≤ "‡∏£‡∏´‡∏±‡∏™‡πÇ‡∏Ñ‡∏£‡∏á‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡∏à‡∏±‡∏¢"
                legend_font_size=20,
                legend=dict(
                    orientation="v",   # ‡πÅ‡∏™‡∏î‡∏á‡πÅ‡∏ô‡∏ß‡∏ô‡∏≠‡∏ô (horizontal) / v
                    yanchor="top",  # 'auto', 'top', 'middle', 'bottom'
                    y=1,            # ‡πÄ‡∏•‡∏∑‡πà‡∏≠‡∏ô legend ‡∏•‡∏á‡∏î‡πâ‡∏≤‡∏ô‡∏•‡πà‡∏≤‡∏á‡πÉ‡∏ï‡πâ‡∏Å‡∏£‡∏≤‡∏ü
                    xanchor="left",  # left right center
                    x=0            # ‡πÉ‡∏´‡πâ‡∏≠‡∏¢‡∏π‡πà‡∏ï‡∏£‡∏á‡∏Å‡∏•‡∏≤‡∏á
            ))
            fig.update_traces(
                hoverlabel=dict(
                    font_size=16,
                    font_family="Tahoma"
                )
            )
            # st.dataframe(formatted_summary)
            # st.plotly_chart(fig, use_container_width=True)

            col1, col2 = st.columns(2)
            col1, col2 = st.columns([2, 1])

        with col1:
            st.subheader("üìä ‡∏Å‡∏£‡∏≤‡∏ü‡πÅ‡∏™‡∏î‡∏á‡∏™‡∏±‡∏î‡∏™‡πà‡∏ß‡∏ô‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡πÄ‡∏á‡∏¥‡∏ô‡∏ó‡∏∏‡∏ô‡∏ß‡∏¥‡∏à‡∏±‡∏¢")
            st.plotly_chart(fig, use_container_width=False)

        with col2:
            st.subheader("üìä ‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏ó‡∏∏‡∏ô")
            st.dataframe(formatted_summary, use_container_width=True)

        st.markdown(f"### üí∞ ‡πÉ‡∏ä‡πâ‡πÑ‡∏õ (‡∏ó‡∏∏‡∏ô‡∏†‡∏≤‡∏¢‡πÉ‡∏ô): `{total_used:,.0f}` ‡∏ö‡∏≤‡∏ó / ‡∏Ñ‡∏á‡πÄ‡∏´‡∏•‡∏∑‡∏≠: `{remaining:,.0f}` ‡∏ö‡∏≤‡∏ó")
